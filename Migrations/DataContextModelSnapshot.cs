// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Practico_2.Data;

#nullable disable

namespace Practico_2.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Curso", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaDeAlta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EstatusId");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("CursosEstudiantes", b =>
                {
                    b.Property<int>("CursoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstudiantesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CursoId", "EstudiantesId");

                    b.HasIndex("EstudiantesId");

                    b.ToTable("CursosEstudiantes");
                });

            modelBuilder.Entity("Estatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaDeAlta")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Estatus");
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaDeAlta")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstatusId");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EstatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstatusId");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("Curso", b =>
                {
                    b.HasOne("Estatus", "Estatus")
                        .WithMany("Cursos")
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Profesor", "Profesor")
                        .WithMany("Cursos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estatus");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("CursosEstudiantes", b =>
                {
                    b.HasOne("Curso", "Curso")
                        .WithMany("CursosEstudiantes")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Estudiante", "Estudiante")
                        .WithMany("CursosEstudiantes")
                        .HasForeignKey("EstudiantesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.HasOne("Estatus", "Estatus")
                        .WithMany("Estudiantes")
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estatus");
                });

            modelBuilder.Entity("Profesor", b =>
                {
                    b.HasOne("Estatus", "Estatus")
                        .WithMany("Profesores")
                        .HasForeignKey("EstatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estatus");
                });

            modelBuilder.Entity("Curso", b =>
                {
                    b.Navigation("CursosEstudiantes");
                });

            modelBuilder.Entity("Estatus", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Estudiantes");

                    b.Navigation("Profesores");
                });

            modelBuilder.Entity("Estudiante", b =>
                {
                    b.Navigation("CursosEstudiantes");
                });

            modelBuilder.Entity("Profesor", b =>
                {
                    b.Navigation("Cursos");
                });
#pragma warning restore 612, 618
        }
    }
}
